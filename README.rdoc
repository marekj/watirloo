= Watirloo

* http://github.com/marekj/watirloo

== DESCRIPTION:

Custom Extensions for Watir, Firewatir and Acceptance Test Framework based on semantic objects modeling customer's domain language
It helps you write human readable and machine executable browser tests based on Page Adapters and UseCase scenarios.

The Human Readable part helps you create interfaces to elements on the page and tags them with friendly names 
based on vocabulary of Business Domain. The Machine Executable parts talk to Watir API hooking into DOM elements. 
This arrangement we call scientifically Semantic Page Objects or Page Adapters.
it helps you concentrate in your acceptance tests on the intention and the customer's language and not on implementation of DOM.
The tests you write are customer facing tests hence faces metaphor for Page Objects of Significance to the Customer.

== FEATURES/PROBLEMS:

* Watirloo::Page acts as an adapter with customer facing semantic names for page objects and developer facing implamention talking to the browser.
* Page creates an abstraction adapter: Human Readable and Machine Executable.
* Pages contain faces; page objects that are named with semantic intent
* Best to work with one browser instance on the desktop.
* Ducktapes Watir and Firewatir gems to ease testing
* groups radios in radio_group and checkboxes in checkbox_group and acts each group as page object

== SYNOPSIS:

By convention Watirloo::Page.new attaches itself to the existing IE browser instance on the desktop.

Example: Given a page with text fields for last name and first name we want to enter name 'Kurt Vonnegut'
You can define hash with key as semantic name and value as watir implementation

  page = Watirloo::Page.new
  page.face :last => [:text_field, :name, 'l_nm'],
  page.face :first => [:text_field, :name, 'f_nm']
  page.last.set "Vonnegut"
  page.first.set "Kurt"
  
Or you can define a specialized page

  class AuthorSearchPage < Watirloo::Page
    face :last => [:text_field, :name, 'l_nm']
    face :first => [:text_field, :name, 'f_nm']
  end
  
and  run tests with few lines of code

  page = AuthorSearchPage.new
  page.spray {:first => 'Kurt', :last => 'Vonnegut'}

Or you can create a wrapper method that delegates to the browser for special situations
  
  class Person < Watirloo::Page
    def last
      dombase.text_field(:name, 'lnm')
    end
    def first
      dombase.text_field(:name, 'fnm')
    end
  end

  
== REQUIREMENTS:

* watir = 1.6.2 runs on IE by default
* firewatir = 1.6.2 if you want to use Firefox
* newgem
* rspec gem if you want to run watirloo examples included

== INSTALL:

* Run the following if you haven't already:
    gem sources -a http://gems.github.com

* Install the gem(s):
  gem install marekj-watirloo

* or download from : http://github.com/marekj/watirloo/downloads

=== ROADMAP

Towards version 0.0.5
* UseCase examples and tests showing the intent of scenario based testing

Towards version 0.0.4

* redesign Page class to make faces as closures to be called later with parameters
* come up with some storage for storing existing browsers on the desktop to reattach later when doing exploratory testing
* DONE make RadioGroups and CheckboxGroups classes for both IE and Firefox
* STARTED: design reflector methods to reflect Watirloo boilerplate code from the page. A PageRecord type recording tool.
* come up with auditing of a desktop for existence of browsers to find out what new browsers exist, were added, and which ones deleted.
* for exploratory testing make a browser events publisher so listeners can subscribe and we can do some data processing on navigations
* move all tests to use 'rspec'

Towards version 0.0.3

* DONE: make class level interfaces as base for the class and subclass. remove it from initilize method
* NOTDONE: UseCase class, scenario based runner (implement rspec first)
* NOTDONE: clean up reflector method to reflect according to new interface structuresm (after new face mechanis works I'll revisit this)
* NOTDONE: move RadioGroup and CheckboxGroup to Watir gem (work with Bret) (probably keep it as an extension to Watir)
* DONE: make RadioGroups and CheckboxGroups classes for both IE and Firefox

Towards version 0.0.2

* DONE: make Watirloo agnostic to browser IE or Firefox or Safari
* DONE: make tests run on IE, Firefox, Safari with the same interface
* DONE: create radio_group to behave like select list and checkbox_group like multi select list
* build UseCase class as template for scenario based execution of tests for exploratory testing

== LICENSE:

(The MIT License)

Copyright (c) 2008 marekj
http://www.opensource.org/licenses/mit-license.php
